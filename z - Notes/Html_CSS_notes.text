ðŸŒŸ Day 1 â€” HTML Basics

ðŸ”¹ Headings
- h1 to h6 â†’ different levels of headings

ðŸ”¹ Paragraph & Text
- <p> â†’ paragraph
- <b> â†’ bold text
- <sub> â†’ subscript (Hâ‚‚O)
- <sup> â†’ superscript (eË£)

ðŸ”¹ Links
- <a href="url" target="_blank"> â†’ hyperlink (open in new tab)

ðŸ”¹ Lists
- <ol> â†’ ordered list
- <ul> â†’ unordered list
- <li> â†’ list item

ðŸ”¹ Tables
- <table>, <tr>, <td>, <th>
- colspan / rowspan â†’ merge columns & rows

ðŸ”¹ Forms
- <input> â†’ text, password, email, radio, checkbox, file, number, etc.
- <select> <option> â†’ dropdown
- <button> â†’ submit button
- method="get/post" & action="url"

ðŸ”¹ Media
- <img src="path" alt="desc">
- <video src="..." controls>
- <audio src="..." controls>
- <iframe src="..."> â†’ embed YouTube etc.

ðŸ”¹ Semantic Tags
- <header>, <nav>, <main>, <section>, <article>, <footer>
- Give meaning to structure (SEO + readability)

ðŸ”¹ Block-level Elements
- <div>, <p>, <h1>-<h6>, <section>, <article>, <table>, <ul>, <ol>, <form>, <footer>, <header>, <nav>, etc.

************************************************************************************************************************
ðŸŒŸ Day 2 â€” Dominoâ€™s Website (HTML + CSS Practice)  
   (   display: flex;
      justify-content: 
      flex-wrap: wrap;) etc
************************************************************************************************************************
ðŸŒŸ Day 3 â€” CSS Text 

ðŸ”¹ Text Properties
- font-family â†’ changes font style (e.g., sans-serif, serif, monospace)
- font-size â†’ size of text (px, em, rem, %)
- font-weight â†’ thickness (normal, bold, 100â€“900)

- text-align â†’ align text (left, right, center, justify)
- text-decoration â†’ underline, overline, line-through, styles (dotted, wavy, double, etc.)
- text-shadow â†’ adds shadow â†’ text-shadow: x-offset y-offset blur color;
- text-transform â†’ capitalize, uppercase, lowercase

************************************************************************************************************************
ðŸŒŸ Day 4 â€” Display, Borders, Units & Shadows  

ðŸ”¹ Display  
- display: block â†’ takes full width  
- display: inline â†’ fits content only  
- display: inline-block â†’ inline + allows height/width  
- display: none â†’ element disappears  
- visibility: hidden â†’ element hidden but space remains  

ðŸ”¹ Borders  
- border-style â†’ solid, dashed, dotted, double  
- border-color â†’ sets color of border  
- border-width â†’ top, right, bottom, left width  
- border-radius â†’ curves corners (px, %, multiple values)  
- border-bottom-left-radius â†’ curve specific corner  

ðŸ”¹ Box Model  
- box-sizing: border-box â†’ includes padding & border in width/height  

ðŸ”¹ Shadows  
- box-shadow â†’ element shadow â†’ (x-offset, y-offset, blur, spread, color)  
- text-shadow â†’ text shadow  

ðŸ”¹ Units  
- % â†’ relative to parent  
- vh (viewport height), vw (viewport width) â†’ relative to screen size  
- rem â†’ relative to root (html) font-size  
- em â†’ relative to parent element font-size
************************************************************************************************************************
ðŸŒŸ Day 5 â€” Navbar Practice  

ðŸ”¹ Navbar (Navigation Bar)  
- Usually created using <nav> or <div>  
- Contains <ul> (unordered list) and <li> items for links  
- Links made using <a> tag  

ðŸ”¹ CSS for Navbar  
- display: flex â†’ arrange items in row  
- justify-content: space-between / space-around / center  
- align-items: center â†’ vertical alignment  
- background-color â†’ set navbar color  
- list-style: none â†’ remove bullets  
- text-decoration: none â†’ remove underline from links  
- padding & margin â†’ spacing 
************************************************************************************************************************

ðŸŒŸ Day 6 â€” CSS Grid  

ðŸ”¹ Grid Basics  
- display: grid â†’ enables grid layout  
- grid-template-columns â†’ defines column structure  
   (ex: repeat(3, 1fr) â†’ 3 equal columns)  
- grid-template-rows â†’ defines row structure  
   (ex: repeat(auto-fill, minmax(100px, 1fr)) â†’ auto-fit rows)  
- gap â†’ spacing between rows/columns  

ðŸ”¹ Grid Item Control  
- grid-column-start / grid-column-end â†’ position items horizontally  
- grid-row-start / grid-row-end â†’ position items vertically  
- grid-column / grid-row â†’ shorthand 

************************************************************************************************************************
ðŸŒŸ Day 7 â€” CSS Selectors & Pseudo

ðŸ”¹ CSS Selectors
1. Group Selector ( , )    -->  Apply same style to multiple elements at once.

2. Descendant Selector ( space )  --> Selects elements inside another element.
 

3. Child Selector ( > )  --> Selects only the direct child (not deeper).   
                         --> Can be combined with :first-child, :last-child, :nth-child()

4. Adjacent Sibling Selector ( + ) --> Selects the element just after another.

5. General Sibling Selector ( ~ )  --> Selects all siblings after a specific element.
  


ðŸ”¹ Pseudo Selectors
(Pseudo selectors are of two types: Pseudo Classes + Pseudo Elements)


ðŸŸ¢ Pseudo Classes -â†’ element states
- :link        â†’ normal link
- :visited     â†’ link after clicked
- :hover       â†’ when mouse is over
- :active      â†’ when link is clicked
- :focus       â†’ when element is focused (input, button etc.)
- :first-child â†’ first child of parent
- :last-child  â†’ last child of parent
- :nth-child(n)â†’ nth child of parent

âš¡ Order for links: link â†’ visited â†’ hover â†’ active  (LVHA)


***********************************************************************************************************************

ðŸŒŸ Day 8 â€” CSS Position, Z-index & Transform

ðŸŸ¡ Pseudo Elements â†’ parts of elements
- ::before      â†’ add content before element
- ::after       â†’ add content after element
- ::placeholder â†’ style placeholder in input fields
- ::selection   â†’ style highlighted/selected text



ðŸ”¹ Position in CSS
1. static (default)
   - Normal flow of page
   - top/right/bottom/left don't work

2. relative
   - Positioned relative to its normal place
   - top/right/bottom/left shift element from its original spot

3. absolute
   - Positioned relative to the nearest positioned ancestor
   - If no ancestor â†’ relative to <html> (document body)

4. fixed
   - Positioned relative to the browser window
   - Stays fixed while scrolling (ex: sticky header, floating button)

5. sticky
   - Acts like relative UNTIL a scroll limit is reached
   - Then sticks to that position
   - (ex: navbar that sticks at top while scrolling)


ðŸ”¹ Z-index
- Controls stacking order of elements (which comes above which)
- Higher z-index = appears on top
- Works only on positioned elements (not static)


ðŸ”¹ Transform (2D basics)
1. scale(x,y)
   - Increases/decreases size
   - Example: transform: scale(1.5);  â†’ 150% bigger

2. translate(x,y)
   - Moves element along X and Y axis
   - Example: transform: translate(50px, 20px);
   - Positive â†’ right/down, Negative â†’ left/up

   rotate 
************************************************************************************************************************

ðŸŒŸ Day 9
1. Media Queries

ðŸ‘‰ Used for responsive design (different styles for different screen sizes).

2. CSS Variables

ðŸ‘‰ Reusable values (colors, fonts, sizes).

Global variable â†’ defined inside :root (accessible everywhere).

Keyframes (Animation)

ðŸ‘‰ Used to define steps in an animation.